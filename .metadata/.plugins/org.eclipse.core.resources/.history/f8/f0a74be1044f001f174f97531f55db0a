package com.interview.keycloak.config;

import java.util.Collection;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import org.springframework.boot.autoconfigure.security.oauth2.resource.OAuth2ResourceServerProperties.Jwt;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.oauth2.jwt.JwtClaimNames;
import org.springframework.security.web.SecurityFilterChain;

import io.micrometer.common.lang.NonNull;

@Configuration
@EnableWebSecurity
public class SecurityConfiguration {
	
	@Bean
	public SecurityFilterChain configure(HttpSecurity http) throws Exception {
		http	
		  .oauth2Client()
		  .and()
		  .oauth2ResourceServer(t ->{
			  t.jwt(Customizer.withDefaults());
		  });

	    http
	    .sessionManagement(session->{
	    	session.sessionCreationPolicy(SessionCreationPolicy.STATELESS);
	    });
	    
        http.authorizeHttpRequests(auth->{
    	   auth.requestMatchers("/home")
           .permitAll()
           .requestMatchers("/")
           .permitAll()
           .anyRequest()
               .fullyAuthenticated(); 
       });	
                  
	    http
        .logout(logout->{
        	logout
        	 .invalidateHttpSession(true)
        	 .logoutSuccessUrl("http://localhost:9090/home");
        });   

		return http.build();
	}
	@Override
	public JwtAuthenticationToken convert(@NonNull Jwt jwt) {
	    Stream<SimpleGrantedAuthority> accesses = Optional.of(jwt)
	            .map(token -> token.getClaimAsMap(RESOURCE_ACCESS))
	            .map(claimMap -> (Map<String, Object>) claimMap.get(properties.getResourceId()))
	            .map(resourceData -> (Collection<String>) resourceData.get(ROLES))
	            .stream()
	            .map(role -> new SimpleGrantedAuthority(ROLE_PREFIX + role))
	            .distinct();

	    Set<GrantedAuthority> authorities = Stream
	            .concat(jwtGrantedAuthoritiesConverter.convert(jwt).stream(), accesses)
	            .collect(Collectors.toSet());

	    String principalClaimName = properties.getPrincipalAttribute()
	            .map(jwt::getClaimAsString)
	            .orElse(jwt.getClaimAsString(JwtClaimNames.SUB));

	    return new JwtAuthenticationToken(jwt, authorities, principalClaimName);
	}



//	   @Bean
//	    public SecurityFilterChain configure(HttpSecurity http) throws Exception {
//	        http
//	                .oauth2Client()
//	                    .and()
//	                .oauth2Login()
//	                .tokenEndpoint()
//	                    .and()
//	                .userInfoEndpoint();
//
//	        http
//	                .sessionManagement()
//	                .sessionCreationPolicy(SessionCreationPolicy.ALWAYS);
//
//	        http
//	                .authorizeHttpRequests()	                           
//	                            .anyRequest()
//	                                .fullyAuthenticated()
//	                .and()
//	                    .logout()
//	                    .logoutSuccessUrl("http://localhost:8080/realms/external/protocol/openid-connect/logout?redirect_uri=http://localhost:8081/");
//
//	        return http.build();
//	    }
//	
	
}
